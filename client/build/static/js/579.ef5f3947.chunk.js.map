{"version":3,"file":"static/js/579.ef5f3947.chunk.js","mappings":"iOAOaA,EAAK,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAkBC,GAAsB,IAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC3CC,EAAAA,EAAkBC,KAAK,GAADC,OACxCC,EAAAA,EAAYC,aAAY,KAAAF,OAAIT,GAC/BC,GACA,KAAD,EAHa,OAARC,EAAQE,EAAAQ,KAAAR,EAAAS,OAAA,SAIPX,GAAQ,wBAAAE,EAAAU,OAAA,GAAAf,EAAA,KAChB,gBANiBgB,EAAAC,GAAA,OAAArB,EAAAsB,MAAA,KAAAC,UAAA,KAQLC,EAAQ,eAAAC,GAAAxB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuB,EACtBrB,EACAsB,GAAgC,IAAApB,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAjB,KAAA,EAETC,EAAAA,EAAkBC,KAAK,GAADC,OACxCC,EAAAA,EAAYC,aAAY,KAAAF,OAAIT,GAC/BsB,GACA,KAAD,EAHa,OAARpB,EAAQqB,EAAAX,KAAAW,EAAAV,OAAA,SAIPX,GAAQ,wBAAAqB,EAAAT,OAAA,GAAAO,EAAA,KAChB,gBAToBG,EAAAC,GAAA,OAAAL,EAAAH,MAAA,KAAAC,UAAA,KAWRQ,EAAkB,eAAAC,GAAA/B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8B,EAChC5B,EACA6B,GAAkB,IAAA5B,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OAIjB,OAFKL,EAAO,CACX4B,WAAAA,GACDC,EAAAxB,KAAA,EACsBC,EAAAA,EAAkBC,KAAK,GAADC,OACxCC,EAAAA,EAAYC,aAAY,KAAAF,OAAIT,GAC/BC,GACA,KAAD,EAHa,OAARC,EAAQ4B,EAAAlB,KAAAkB,EAAAjB,OAAA,SAIPX,EAASD,MAAI,wBAAA6B,EAAAhB,OAAA,GAAAc,EAAA,KACrB,gBAZ8BG,EAAAC,GAAA,OAAAL,EAAAV,MAAA,KAAAC,UAAA,K,WCvBlBe,EAAe,SAACX,GAC3B,OAAO5B,EAAMwC,EAAAA,EAAWC,cAAeb,EACzC,EAEac,EAAkB,SAACd,GAC9B,OAAOH,EAASe,EAAAA,EAAWG,iBAAiBf,EAC9C,EAEagB,EAAc,SAACT,GAC1B,OAAOH,EAAmBQ,EAAAA,EAAWK,qBAAqBV,EAE5D,C,wGC+CA,IAtDA,WACE,IAAMW,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MA4BjB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOC,UACpBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,UACpCF,EAAAA,EAAAA,KAACG,EAAAA,GAAW,CACVC,MAAM,QACNC,KAAK,QAELC,eAAe,SACfC,MAAM,OACNC,aAAa,EACbC,KAAK,WACLC,QAAQ,QACNC,UAAW,SAACrD,GACK,IAADsD,EAjCQ3B,EAiClB3B,IAjCkB2B,EAkCsB,QAApB2B,EAACtD,EAAS2B,kBAAU,IAAA2B,EAAAA,EAAI,kBAjCxDlB,EAAAA,EAAAA,IAAYT,GACT4B,MAAK,SAACvD,GACL,IACEwD,EAEiDxD,EAFjDwD,YACAC,EACiDzD,EADjDyD,aAEFjB,GAASkB,EAAAA,EAAAA,IAAS,CAAEF,YAAAA,EAAaC,aAAAA,EAAaE,SAAS,aACvDC,EAAAA,GAAMC,QAAgB,OAAR7D,QAAQ,IAARA,OAAQ,EAARA,EAAU8D,QAAS,CAC/BC,SAAUH,EAAAA,GAAMI,SAASC,eAET,YAAlBjE,EAASkE,QAAoB5B,EAAS,IACxC,IACC6B,OAAM,SAACC,GAAe,IAADC,EACpBT,EAAAA,GAAMQ,MAAW,OAALA,QAAK,IAALA,GAAW,QAANC,EAALD,EAAOrE,YAAI,IAAAsE,OAAN,EAALA,EAAaP,QAAS,CAChCC,SAAUH,EAAAA,GAAMI,SAASC,cAE7B,IAmBI,EACAK,QA3Ca,WACnBV,EAAAA,GAAMQ,MAAM,0BAA2B,CACrCL,SAAUH,EAAAA,GAAMI,SAASC,cAE7B,OA4CF,C,0IC1DaM,GAA+BC,EAAAA,EAAAA,MAASvB,MAAM,CACvDwB,OAAOC,EAAAA,EAAAA,MAASD,MAAM,iBAAiBE,SAAS,qBAChDC,UAAUF,EAAAA,EAAAA,MAASC,SAAS,0B,uFCiJhC,EAvImC,WACjC,IAAMnC,GAAWC,EAAAA,EAAAA,MACXH,GAAWC,EAAAA,EAAAA,MACXsC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IACnBC,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IAEzBC,EAAY,eAAAzF,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOsF,GAAgB,IAAAnF,EAAAoF,EAAA5B,EAAAC,EAAAY,EAAA,OAAA1E,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEjB2B,EAAAA,EAAAA,IAAaoD,GAAa,KAAD,EAA1CnF,EAAQE,EAAAQ,KAAA0E,EAIqCpF,EAASD,KAF1DyD,EAAW4B,EAAX5B,YACAC,EAAY2B,EAAZ3B,aAEFjB,GAASkB,EAAAA,EAAAA,IAAS,CAAEF,YAAAA,EAAaC,aAAAA,EAAaE,SAAS,aAC9B,YAAzB3D,EAASD,KAAKmE,QAAwB5B,EAAS,KAAKpC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAmF,GAAAnF,EAAA,SAEpD0D,EAAAA,GAAMQ,MAAK,OAAAlE,EAAAmF,SAAA,IAAAnF,EAAAmF,IAAY,QAAZhB,EAACnE,EAAAmF,GAAOtF,YAAI,IAAAsE,OAAZ,EAACA,EAAaP,QAAS,CAChCC,SAAUH,EAAAA,GAAMI,SAASC,eACxB,yBAAA/D,EAAAU,OAAA,GAAAf,EAAA,kBAEN,gBAdiBgB,GAAA,OAAApB,EAAAsB,MAAA,KAAAC,UAAA,KAsBlB,OANAsE,EAAAA,EAAAA,YAAU,WACJN,GAAmB,YAAPH,GACdvC,EAAS,IAEb,GAAG,CAAC0C,EAAY1C,KAGdI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oEAAmEC,UAChF2C,EAAAA,EAAAA,MAAA,OAAK5C,UAAU,2FAA0FC,SAAA,EACvG2C,EAAAA,EAAAA,MAAA,OAAK5C,UAAU,mCAAkCC,SAAA,EAC/CF,EAAAA,EAAAA,KAAA,OACEC,UAAU,sBACV6C,IAAKC,EAAAA,GACLC,IAAI,kBAENhD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,8EAA6EC,SAAC,gCAI9FF,EAAAA,EAAAA,KAACiD,EAAAA,GAAM,CACLC,cAAe,CAAEnB,MAAO,GAAIG,SAAU,IACtCiB,iBAAkBtB,EAClBuB,SAAUZ,EAAatC,UAEvB2C,EAAAA,EAAAA,MAACQ,EAAAA,GAAI,CAACpD,UAAU,kBAAiBC,SAAA,EAC/B2C,EAAAA,EAAAA,MAAA,OAAA3C,SAAA,EACEF,EAAAA,EAAAA,KAAA,SACEsD,QAAQ,QACRrD,UAAU,oDAAmDC,SAC9D,mBAGD2C,EAAAA,EAAAA,MAAA,OAAK5C,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACJC,GAAG,QACHC,KAAK,QACLhD,KAAK,QACLiD,aAAa,QACbzB,UAAQ,EACRhC,UAAU,8OAEZD,EAAAA,EAAAA,KAAC2D,EAAAA,GAAY,CACXF,KAAK,QACLG,UAAU,MACV3D,UAAU,gCAKhB4C,EAAAA,EAAAA,MAAA,OAAA3C,SAAA,EACE2C,EAAAA,EAAAA,MAAA,OAAK5C,UAAU,oCAAmCC,SAAA,EAChDF,EAAAA,EAAAA,KAAA,SACEsD,QAAQ,WACRrD,UAAU,oDAAmDC,SAC9D,cAGDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBF,EAAAA,EAAAA,KAAA,KACE6D,KAAK,IACL5D,UAAU,oDAAmDC,SAC9D,2BAKL2C,EAAAA,EAAAA,MAAA,OAAK5C,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACJC,GAAG,WACHC,KAAK,WACLhD,KAAK,WACLiD,aAAa,mBACbzB,UAAQ,EACRhC,UAAU,2OAEZD,EAAAA,EAAAA,KAAC2D,EAAAA,GAAY,CACXF,KAAK,WACLG,UAAU,MACV3D,UAAU,gCAKhB4C,EAAAA,EAAAA,MAAA,OAAA3C,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UACpBF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAmB,OAEpB9D,EAAAA,EAAAA,KAAA,UACES,KAAK,SACLR,UAAU,mPAAkPC,SAC7P,qBAOP2C,EAAAA,EAAAA,MAAA,KAAG5C,UAAU,0CAAyCC,SAAA,CAAC,2BAErDF,EAAAA,EAAAA,KAAC+D,EAAAA,GAAI,CACHC,GAAG,YACH/D,UAAU,8DAA6DC,SACxE,0BAQb,C","sources":["api/services/auth/student-auth-services.ts","api/endpoints/auth/student-auth.ts","components/common/google-auth-component.tsx","validations/auth/studentLoginValidation.ts","components/pages/students/student-login-page.tsx"],"sourcesContent":["import CONFIG_KEYS from \"../../../config\";\r\nimport {\r\n  StudentRegisterData,\r\n  StudentLoginData,\r\n} from \"../../types/student/auth-interface\";\r\nimport authInstanceAxios from \"../../middlewares/interceptor\";\r\n\r\nexport const login = async (endpoint: string, data: StudentLoginData) => {\r\n  const response = await authInstanceAxios.post(\r\n    `${CONFIG_KEYS.API_BASE_URL}/${endpoint}`,\r\n    data\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const register = async (\r\n  endpoint: string,\r\n  studentData: StudentRegisterData\r\n) => {\r\n  const response = await authInstanceAxios.post(\r\n    `${CONFIG_KEYS.API_BASE_URL}/${endpoint}`,\r\n    studentData\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const googleLoginStudent = async (\r\n  endpoint: string,\r\n  credential: string\r\n) => {\r\n  const data = {\r\n    credential,\r\n  };\r\n  const response = await authInstanceAxios.post(\r\n    `${CONFIG_KEYS.API_BASE_URL}/${endpoint}`,\r\n    data\r\n  );\r\n  return response.data\r\n};\r\n","import { login,register,googleLoginStudent } from \"../../services/auth/student-auth-services\";\r\nimport END_POINTS from \"../../../constants/endpoints\";\r\n\r\nexport const loginStudent = (studentData: any) => {\r\n  return login(END_POINTS.LOGIN_STUDENT, studentData);\r\n};\r\n\r\nexport const registerStudent = (studentData:any)=>{\r\n  return register(END_POINTS.REGISTER_STUDENT,studentData)\r\n}\r\n\r\nexport const googleLogin = (credential:string) =>{\r\n  return googleLoginStudent(END_POINTS.GOOGLE_LOGIN_STUDENT,credential)\r\n\r\n}\r\n","import { GoogleLogin } from \"@react-oauth/google\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { googleLogin } from \"../../api/endpoints/auth/student-auth\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setToken } from \"../../redux/reducers/authSlice\";\r\n\r\nfunction GoogleAuthComponent(): JSX.Element {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch()\r\n\r\n  const errorMessage = (): void => {\r\n    toast.error(\"error from google login\", {\r\n      position: toast.POSITION.BOTTOM_RIGHT,\r\n    });\r\n  };\r\n\r\n  const handleSignInWithGoogle = (credential: string) => {\r\n    googleLogin(credential)\r\n      .then((response: any) => {\r\n        const {\r\n          accessToken,\r\n          refreshToken,\r\n        }: { accessToken: string; refreshToken: string } = response\r\n        dispatch(setToken({ accessToken, refreshToken,userType:\"student\" }));\r\n        toast.success(response?.message, {\r\n          position: toast.POSITION.BOTTOM_RIGHT,\r\n        });\r\n        response.status===\"success\"&&navigate(\"/\");\r\n      })\r\n      .catch((error:any) => {\r\n        toast.error(error?.data?.message, {\r\n          position: toast.POSITION.BOTTOM_RIGHT,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className='mb-5 '>\r\n      <div className=\"flex justify-center\">\r\n      <GoogleLogin\r\n        width=\"280px\" // Small devices\r\n        size='large'\r\n        // theme=\"filled_blue\"\r\n        logo_alignment=\"center\"\r\n        shape=\"pill\"\r\n        auto_select={false}\r\n        type=\"standard\"\r\n        ux_mode=\"popup\"\r\n          onSuccess={(response) => {\r\n            if (response) {\r\n              handleSignInWithGoogle(response.credential ?? \"empty response\");\r\n            }\r\n          }}\r\n          onError={errorMessage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoogleAuthComponent;\r\n","import { object, string } from \"yup\";\r\nexport const studentLoginValidationSchema = object().shape({\r\n    email: string().email(\"Invalid email\").required(\"Email is required\"),\r\n    password: string().required(\"Password is required\"),\r\n  });","import React, { useEffect } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { loginStudent } from \"../../../api/endpoints/auth/student-auth\";\r\nimport { studentLoginValidationSchema } from \"../../../validations/auth/studentLoginValidation\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport GoogleAuthComponent from \"../../common/google-auth-component\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setToken } from \"../../../redux/reducers/authSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectIsLoggedIn } from \"../../../redux/reducers/authSlice\";\r\nimport { APP_LOGO } from \"../../../constants/common\";\r\nimport { selectUserType } from \"../../../redux/reducers/authSlice\";\r\nconst StudentLoginPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const user = useSelector(selectUserType)\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n  const handleSubmit = async (studentInfo: any) => {\r\n    try {\r\n      const response = await loginStudent(studentInfo);\r\n      const {\r\n        accessToken,\r\n        refreshToken,\r\n      }: { accessToken: string; refreshToken: string } = response.data;\r\n      dispatch(setToken({ accessToken, refreshToken,userType:\"student\" }));\r\n      response.data.status === \"success\" && navigate(\"/\");\r\n    } catch (error: any) {\r\n      toast.error(error?.data?.message, {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn&&user===\"student\") {  \r\n      navigate(\"/\");\r\n    }\r\n  }, [isLoggedIn, navigate]);\r\n\r\n  return (\r\n    <div className=\"m-5 \">\r\n      <div className='flex justify-center items-center mt-16  text-customFontColorBlack'>\r\n        <div className='bg-white rounded-lg mx-4 shadow-xl border p-8 w-full max-w-md md:mx-auto md:p-10 lg:p-12'>\r\n          <div className='sm:mx-auto sm:w-full sm:max-w-sm'>\r\n            <img\r\n              className='mx-auto h-10 w-auto'\r\n              src={APP_LOGO}\r\n              alt='Your Company'\r\n            />\r\n            <h2 className='mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900'>\r\n              Sign in to your account\r\n            </h2>\r\n          </div>\r\n          <Formik\r\n            initialValues={{ email: \"\", password: \"\" }}\r\n            validationSchema={studentLoginValidationSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            <Form className='mt-10 space-y-6'>\r\n              <div>\r\n                <label\r\n                  htmlFor='email'\r\n                  className='block text-sm font-medium leading-6 text-gray-900'\r\n                >\r\n                  Email address\r\n                </label>\r\n                <div className='mt-2'>\r\n                  <Field\r\n                    id='email'\r\n                    name='email'\r\n                    type='email'\r\n                    autoComplete='email'\r\n                    required\r\n                    className=' pl-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-700 focus-visible:outline-none focus-visible:ring-blue-600 sm:text-sm sm:leading-6'\r\n                  />\r\n                  <ErrorMessage\r\n                    name='email'\r\n                    component='div'\r\n                    className='text-red-500 text-sm'\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <div className='flex items-center justify-between'>\r\n                  <label\r\n                    htmlFor='password'\r\n                    className='block text-sm font-medium leading-6 text-gray-900'\r\n                  >\r\n                    Password\r\n                  </label>\r\n                  <div className='text-sm'>\r\n                    <a\r\n                      href='/'\r\n                      className='font-semibold text-blue-600 hover:text-indigo-500'\r\n                    >\r\n                      Forgot password?\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n                <div className='mt-2'>\r\n                  <Field\r\n                    id='password'\r\n                    name='password'\r\n                    type='password'\r\n                    autoComplete='current-password'\r\n                    required\r\n                    className='pl-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-700 focus-visible:outline-none focus-visible:ring-blue-600 sm:text-sm sm:leading-6'\r\n                  />\r\n                  <ErrorMessage\r\n                    name='password'\r\n                    component='div'\r\n                    className='text-red-500 text-sm'\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"m-5\">\r\n                <GoogleAuthComponent />\r\n                </div>\r\n                <button\r\n                  type='submit'\r\n                  className='flex w-full justify-center rounded-md bg-blue-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600'\r\n                >\r\n                  Sign in\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          </Formik>\r\n\r\n          <p className='mt-10 text-center text-sm text-gray-500'>\r\n            Do not have an account?\r\n            <Link\r\n              to='/register'\r\n              className='font-semibold leading-6 text-blue-600 hover:text-indigo-500'\r\n            >\r\n              &nbsp; Sign up\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentLoginPage;\r\n"],"names":["login","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","endpoint","data","response","wrap","_context","prev","next","authInstanceAxios","post","concat","CONFIG_KEYS","API_BASE_URL","sent","abrupt","stop","_x","_x2","apply","arguments","register","_ref2","_callee2","studentData","_context2","_x3","_x4","googleLoginStudent","_ref3","_callee3","credential","_context3","_x5","_x6","loginStudent","END_POINTS","LOGIN_STUDENT","registerStudent","REGISTER_STUDENT","googleLogin","GOOGLE_LOGIN_STUDENT","navigate","useNavigate","dispatch","useDispatch","_jsx","className","children","GoogleLogin","width","size","logo_alignment","shape","auto_select","type","ux_mode","onSuccess","_response$credential","then","accessToken","refreshToken","setToken","userType","toast","success","message","position","POSITION","BOTTOM_RIGHT","status","catch","error","_error$data","onError","studentLoginValidationSchema","object","email","string","required","password","user","useSelector","selectUserType","isLoggedIn","selectIsLoggedIn","handleSubmit","studentInfo","_response$data","t0","useEffect","_jsxs","src","APP_LOGO","alt","Formik","initialValues","validationSchema","onSubmit","Form","htmlFor","Field","id","name","autoComplete","ErrorMessage","component","href","GoogleAuthComponent","Link","to"],"sourceRoot":""}